{
  "_comment": [
    "Custom target for Rust, that compiles to x86_64 64-bit bare-metal code.",
    "",
    "I'm not sure, whats the best option for linker and link-flavor. I just used values that works.",
    "",
    "To get a generic overview over values you can use here, see:",
    "  - https://github.com/rust-lang/rust/tree/1.52.1/compiler/rustc_target/src/spec",
    "  - https://doc.rust-lang.org/stable/nightly-rustc/rustc_target/spec/struct.TargetOptions.html",
    "    ^ explains most of the other fields below that are not explained yet",
    "",
    "llvm-target:",
    "  - the triples are probably combinations of the values in the enums here:",
    "    - https://llvm.org/doxygen/Triple_8h_source.html",
    "  - https://llvm.org/docs/LangRef.html#target-triple",
    "  - to get a list of supported targets, type: '$ rustc --print target-list' (incomplete! :( )",
    "data-layout:",
    "  - https://llvm.org/docs/LangRef.html#data-layout",
    "  - this code helps to understand how the data layout string works a little better; its rusts code to parse it",
    "    - https://github.com/rust-lang/rust/blob/1.52.1/compiler/rustc_target/src/abi/mod.rs#L68",
    "  - https://stackoverflow.com/questions/67888518/",
    "arch:",
    "  - valid values are: “x86”, “x86_64”, “arm”, “aarch64”, “mips”, “powerpc”, “powerpc64”, and others.",
    "  - https://doc.rust-lang.org/nightly/nightly-rustc/rustc_target/spec/struct.Target.html",
    "  - also used in `#cfg(target_arch = <arch>)`",
    "disable-redzone: ",
    "  I think we have no disadvantage when disabling this. Not sure.",
    "  - https://github.com/rust-lang/rust/blob/673d0db5e393e9c64897005b470bfeb6d5aec61b/compiler/rustc_codegen_llvm/src/declare.rs#L45",
    "  - https://os.phil-opp.com/red-zone/",
    "  TODO: investigate, when we need this or if we need this at all ever",
    "",
    "features:",
    "  +soft-float: there have been reports to GRUB that some firmware does not initialize the FP exception handlers",
    "               properly. Therefore, using FP coprocessors will end you up at random memory locations when",
    "               you throw FP exceptions",
    "  -sse, -avx, ...: if we have code that uses registers or instructions from these ISA extensions, we will get",
    "                   bad opcode exceptions. We need to turn the features one first. Also, we only want these features",
    "                   in userland but not in Kernel to save stack space etc.",
    "linker:",
    " - https://doc.rust-lang.org/rustc/codegen-options/index.html",
    " - https://doc.rust-lang.org/nightly/nightly-rustc/rustc_target/spec/struct.TargetOptions.html",
    "linker-flavor:",
    "  - it's okay to only specify the flavor; the 'linker' field gets deduced",
    "  - https://doc.rust-lang.org/rustc/codegen-options/index.html",
    "  - https://doc.rust-lang.org/nightly/nightly-rustc/rustc_target/spec/enum.LinkerFlavor.html",
    "  - https://doc.rust-lang.org/nightly/nightly-rustc/rustc_target/spec/struct.TargetOptions.html"
  ],
  "arch": "x86_64",
  "data-layout": "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128",
  "disable-redzone": true,
  "executables": true,
  "features": "+soft-float,-sse,-mmx,-avx,-sse2,-sse3,-ssse3,-sse4.1,-sse4.2,-avx2,-fma,-3dnow,-3dnowa",
  "linker": "rust-lld",
  "linker-flavor": "ld.lld",
  "llvm-target": "x86_64-unknown-none",
  "target-c-int-width": "32",
  "target-endian": "little",
  "target-pointer-width": "64",
  "os": "none",
  "panic-strategy": "abort",
  "_comment2": [
    "add 'GNU ld' linker args here"
  ],
  "pre-link-args": {
    "ld.lld": [
      "-n",
      "-T",
      "./link.ld"
    ]
  }
}
